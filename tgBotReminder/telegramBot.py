"""–§–∞–π–ª —Ö—Ä–∞–Ω–∏—Ç –≤–µ—Å—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Ç–≥ –±–æ—Ç–∞"""

from datetime import datetime, timedelta
import telebot
from apscheduler.schedulers.background import BackgroundScheduler
from dotenv import load_dotenv

from Data import *
from exceptions import InvalidTypeData, InvalidBotType, IncorrectInterval
from validation import *

load_dotenv()


class TelegramBot:
    def __init__(self, bot, data_storage=Data("birthdays.json"), schedule_interval=30):  #—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞ 30—Å,
        # –Ω–æ —ç—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª–æ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
        self.my_bot = bot
        self.birthdays = data_storage.load_birthdays()
        self.data_storage = data_storage
        self.schedule_interval = schedule_interval
        self.scheduler = BackgroundScheduler()  # —Å–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        self.set_scheduler()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

    """–í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ property"""
    @property
    def my_bot(self):
        return self._my_bot

    @my_bot.setter
    def my_bot(self, value):
        if not isinstance(value, telebot.TeleBot):
            raise InvalidBotType("–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º telebot.TeleBot")
        self._my_bot = value

    @property
    def data_storage(self):
        return self._data_storage

    @data_storage.setter
    def data_storage(self, value):
        if not isinstance(value, Data):
            raise InvalidTypeData("data_storage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–º –∫–ª–∞—Å—Å–∞ Data")
        self._data_storage = value

    @property
    def schedule_interval(self):
        return self._schedule_interval

    @schedule_interval.setter
    def schedule_interval(self, value):
        if not isinstance(value, int):
            raise InvalidTypeData("schedule_interval –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
        if value <= 0:
            raise IncorrectInterval("schedule_interval –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        self._schedule_interval = value


    @staticmethod
    def check_input(message):  # –∏–¥–µ—é, –∫–∞–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é, –ø–æ–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å chat gpt
        """–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å –æ—à–∏–±–æ–∫ —Ä–∞–∑–Ω—ã–º–∏ –≤–æ–∑–Ω–∏–∫—à–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏,
        –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å"""
        parts = message.text.split(" ", 5)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ 5 —á–∞—Å—Ç–µ–π
        if len(parts) != 5:
            return {
                "error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤–≤–µ–¥–∏—Ç–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π(–∏–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –ø—Ä–æ–±–µ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4)."}
        name_surname, date, favourite_color, budget, preferences = parts
        errors = {}  # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è errors, –≥–¥–µ –∫–ª—é—á–∏-—Ç–æ, —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ –∫–∞–∫–æ–º—É –∞—Ä–≥—É–º–µ–Ω—Ç—É –ø—Ä–æ–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,
        # –∞ –∑–Ω–∞—á–µ–Ω–∏–µ-—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –≤–ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not Validation._validate_name_surname(name_surname):
            errors['name_surname'] = "–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ _."
        if not Validation._validate_date(date):
            errors['date'] = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD."
        if not Validation._validate_budget(budget):
            errors['budget'] = "–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º."
        return errors

    def add_birthday_to_dictionary_birthdays(self, message):
        """–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–ª–æ–≤–∞—Ä—å birthdays
        –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—à–∏–±–æ–∫, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–∑–Ω–∏–∫—à–∏–µ –æ—à–∏–±–∫–∏"""
        try:
            errors = self.check_input(message)
            if errors:
                error_message = "\n".join(errors.values())
                self.my_bot.reply_to(message, f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞:\n{error_message}\n–ù–∞–∂–º–∏ —Å–Ω–æ–≤–∞ /add_birthday")
                return
            name_surname, date, favourite_color, budget, preferences = message.text.split(" ", 5)
            if name_surname in self.birthdays:
                self.my_bot.reply_to(message,
                                     "–¢–∞–∫–∏–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ /add_birthday –µ—â–µ —Ä–∞–∑ –∏ "
                                     "–≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ"
                                     "–≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                                     "'name_surname YYYY-MM-DD color_color_color budget "
                                     "preference_preference_preference'.")
                return
            self.birthdays[name_surname] = [date, message.chat.id, favourite_color, budget, preferences]
            self.data_storage.save_birthdays(self.birthdays)
            self.my_bot.reply_to(message, f"–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {name_surname} –Ω–∞ {date} –¥–æ–±–∞–≤–ª–µ–Ω!")
        except:
            self.my_bot.reply_to(message, "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. –í—ã–∑–æ–≤–∏—Ç–µ /add_birthday –µ—â–µ —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ "
                                          "–≤ —Ñ–æ—Ä–º–∞—Ç–µ: "
                                          "'name_surname YYYY-MM-DD color_color_color... budget "
                                          "preference_preference_preference...'.")

    def get_birthday_year(self, message):
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è —á–µ–ª–æ–≤–µ–∫–∞"""
        return int(self.birthdays[message.text][0].split("-")[0])

    def get_age(self, message):
        """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –º–æ–º–µ–Ω—Ç"""
        if message.text in self.birthdays.keys():
            current_year = datetime.datetime.now().year
            birthday_year = self.get_birthday_year(message)
            age = current_year - birthday_year
            self.my_bot.reply_to(message, f"–ß–µ–ª–æ–≤–µ–∫—É {message.text} —Å–µ–π—á–∞—Å {age}")
        else:
            self.my_bot.send_message(message.chat.id, text='–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /show_age')

    def show_birthdays(self, message):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å, –∞ –∏–º–µ–Ω–Ω–æ name_surname –∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if self.birthdays:
            response = "üéÇ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –î–Ω–∏ –†–æ–∂–¥–µ–Ω–∏—è:\n"
            for key, value in self.birthdays.items():
                response += f"- {key}: {value[0]}\n"
        else:
            response = "–ù–∏—á–µ–≥–æ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ"
        self.my_bot.reply_to(message, response)

    def find_user_and_delete(self, message):
        """–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —á–µ–ª–æ–≤–µ–∫–∞(=–∫–ª—é—á) –∏–∑ —Å–ª–æ–≤–∞—Ä—è birthdays"""
        if message.text in self.birthdays.keys():
            del self.birthdays[message.text]
            self.data_storage.save_birthdays(self.birthdays)
            self.my_bot.reply_to(message, f"{message.text} —É–¥–∞–ª—ë–Ω!")
        else:
            self.my_bot.send_message(message.chat.id, text='–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /delete ')

    def print_favourite_colors(self, message):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ª—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ name_surname"""
        if message.text in self.birthdays.keys():
            self.my_bot.send_message(message.chat.id, f"–õ—é–±–∏–º—ã–µ —Ü–≤–µ—Ç–∞: "
                                                      f"{', '.join(self.birthdays[message.text][2].split('_'))}")
        else:
            self.my_bot.send_message(message.chat.id, text='–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /favourite_colors')

    def print_budget(self, message):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ name_surname"""
        if message.text in self.birthdays.keys():
            self.my_bot.send_message(message.chat.id, f"–ë—é–¥–∂–µ—Ç: {self.birthdays[message.text][3]}")
        else:
            self.my_bot.send_message(message.chat.id, text='–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /budget')

    def print_preferences(self, message):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ name_surname"""
        if message.text in self.birthdays.keys():
            self.my_bot.send_message(message.chat.id, f"–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {self.birthdays[message.text][4]}")
        else:
            self.my_bot.send_message(message.chat.id, text='–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë. –î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –≤–≤–µ–¥–∏ /preferences')

    def set_scheduler(self):
        """–§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler.add_job(self.send_birthday_reminders, "interval", seconds=self.schedule_interval,
                               start_date=datetime.datetime.now() + timedelta(seconds=10))
        self.scheduler.start()

    def send_birthday_reminders(self):
        """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—Å—Ç—É–ø–∏–≤—à–µ–º –î–†"""
        today = datetime.datetime.now().date()
        for key, value in self.birthdays.items():
            try:
                birthday = datetime.datetime.strptime(value[0], "%Y-%m-%d").date()
                if birthday.month == today.month and birthday.day == today.day:
                    self.my_bot.send_message(chat_id=value[1], text=f"üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {key}! üéÇ")
            except:

                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {key}")
